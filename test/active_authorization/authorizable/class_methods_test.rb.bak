# frozen_string_literal: true

require 'test_helper'

module ActiveAuthorization
  module Authorizable
    class ClassMethodsTest < Minitest::Test
      def subject
        ::ExtendedObject
      end

      def subject_without_authorization_request_role
        ::ExtendedWithoutCustomerRoleObject
      end

      def subject_without_authorization_request_role_class_name
        ::ExtendedWithoutCustomerRoleObject.name
      end

      def subject_with_namespace
        ::Some::Nested::ExtendedObject
      end

      def authorized_action
        'make_a_tea'
      end

      def prohibited_action
        'have_a_cake'
      end

      def test_without_role_implementation_raises_exception
        assert_raises(NotImplemented) do
          subject_without_authorization_request_role
            .authorize!(user: current_user, message_name: authorized_action)
        end
      end

      def test_not_implemented_exception_message
        subject_without_authorization_request_role
          .authorize!(user: current_user, message_name: authorized_action)
      rescue NotImplemented => error
        assert_equal(
          'The method `authorization_roles` needs to be implemented in ' +
           subject_without_authorization_request_role_class_name,
          error.message
        )
      end

      def test_authorize_bang_prohibited_action
        assert_raises(AccessDenied) do
          subject.authorize!(user: current_user,
                             message_name: prohibited_action)
        end
      end

      def test_authorize_bang_authorized_action
        assert subject.authorize!(user: current_user,
                                  message_name: authorized_action)
      end

      def test_namespaced_extended_object_authorize_bang_authorized_action
        assert subject_with_namespace.authorize!(
          user: current_user,
          message_name: authorized_action
        )
      end

      def test_namespaced_extended_object_authorize_bang_prohibited_action
        assert_raises(AccessDenied) do
          subject_with_namespace.authorize!(user: current_user,
                                            message_name: prohibited_action)
        end
      end

      def test_authorized_authorized_action
        assert subject.authorized?(user: current_user,
                                   message_name: authorized_action)
      end

      def test_authorized_prohibited_action
        refute subject.authorized?(user: current_user,
                                   message_name: prohibited_action)
      end

      def test_authorize_authorized_action
        success = subject.authorize(user: current_user,
                                    message_name: authorized_action) do
          'Big Red Robe Tea'
        end

        assert_equal 'Big Red Robe Tea', success
      end

      def test_authorize_prohibited_action
        nothing = subject.authorize(user: current_user,
                                    message_name: prohibited_action) do
          'Chocolate Cake'
        end

        assert_nil nothing
      end
    end
  end
end
